@use 'sass:map';
@use 'sass:math';

@use './vars';

@mixin thin-scrollbar-color($color, $background: --color-transparent)
{
    .thin-scrollbar
    {
        scrollbar-color: var($color) var($background);
    }
}

@function strip-unit($value)
{
    @return math.div($value, ($value * 0 + 1));
}

@function getSize($fontSize, $size, $fixed: false)
{
    @return #{math.div($size, strip-unit($fontSize))}#{if($fixed == true, rem, em)};
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size)
{
    $u1: math.unit($min-vw);
    $u2: math.unit($max-vw);
    $u3: math.unit($min-font-size);
    $u4: math.unit($max-font-size);

    @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4
    {
        &,
        & .initial-zoom
        {
            font-size: $min-font-size;

            @media screen and (min-width: $min-vw)
            {
                font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
            }
            @media screen and (min-width: $max-vw)
            {
                font-size: $max-font-size;
            }
        }
    }
}

@mixin buildMarginCss($fontSize, $sizes)
{
    @each $sizeName, $size in $sizes
    {
        --size-margin-#{$sizeName}: #{getSize($fontSize, $size)};
        --size-margin-fixed-#{$sizeName}: #{getSize($fontSize, $size, true)};
    }

    @each $sizeName, $size in $sizes
    {
        .margin-#{$sizeName}
        {
            margin: var(--size-margin-#{$sizeName});

            &-fixed
            {
                margin: var(--size-margin-fixed-#{$sizeName});
            }
        }

        .margin-right-#{$sizeName}
        {
            margin-right: var(--size-margin-#{$sizeName});

            &-fixed
            {
                margin-right: var(--size-margin-fixed-#{$sizeName});
            }
        }

        .margin-left-#{$sizeName}
        {
            margin-left: var(--size-margin-#{$sizeName});

            &-fixed
            {
                margin-left: var(--size-margin-fixed-#{$sizeName});
            }
        }

        .margin-top-#{$sizeName}
        {
            margin-top: var(--size-margin-#{$sizeName});

            &-fixed
            {
                margin-top: var(--size-margin-fixed-#{$sizeName});
            }
        }

        .margin-bottom-#{$sizeName}
        {
            margin-bottom: var(--size-margin-#{$sizeName});

            &-fixed
            {
                margin-bottom: var(--size-margin-fixed-#{$sizeName});
            }
        }

        .margin-horizontal-#{$sizeName}
        {
            margin-left: var(--size-margin-#{$sizeName});
            margin-right: var(--size-margin-#{$sizeName});

            &-fixed
            {
                margin-left: var(--size-margin-fixed-#{$sizeName});
                margin-right: var(--size-margin-fixed-#{$sizeName});
            }
        }

        .margin-vertical-#{$sizeName}
        {
            margin-top: var(--size-margin-#{$sizeName});
            margin-bottom: var(--size-margin-#{$sizeName});

            &-fixed
            {
                margin-top: var(--size-margin-fixed-#{$sizeName});
                margin-bottom: var(--size-margin-fixed-#{$sizeName});
            }
        }
    }
}

@mixin buildPaddingCss($fontSize, $sizes)
{
    @each $sizeName, $size in $sizes
    {
        --size-padding-#{$sizeName}: #{getSize($fontSize, $size)};
        --size-padding-fixed-#{$sizeName}: #{getSize($fontSize, $size, true)};
    }

    @each $sizeName, $size in $sizes
    {
        .padding-#{$sizeName}
        {
            padding: var(--size-padding-#{$sizeName});

            &-fixed
            {
                padding: var(--size-padding-fixed-#{$sizeName});
            }
        }

        .padding-right-#{$sizeName}
        {
            padding-right: var(--size-padding-#{$sizeName});

            &-fixed
            {
                padding-right: var(--size-padding-fixed-#{$sizeName});
            }
        }

        .padding-left-#{$sizeName}
        {
            padding-left: var(--size-padding-#{$sizeName});

            &-fixed
            {
                padding-left: var(--size-padding-fixed-#{$sizeName});
            }
        }

        .padding-top-#{$sizeName}
        {
            padding-top: var(--size-padding-#{$sizeName});

            &-fixed
            {
                padding-top: var(--size-padding-fixed-#{$sizeName});
            }
        }

        .padding-bottom-#{$sizeName}
        {
            padding-bottom: var(--size-padding-#{$sizeName});

            &-fixed
            {
                padding-bottom: var(--size-padding-fixed-#{$sizeName});
            }
        }

        .padding-horizontal-#{$sizeName}
        {
            padding-left: var(--size-padding-#{$sizeName});
            padding-right: var(--size-padding-#{$sizeName});

            &-fixed
            {
                padding-left: var(--size-padding-fixed-#{$sizeName});
                padding-right: var(--size-padding-fixed-#{$sizeName});
            }
        }

        .padding-vertical-#{$sizeName}
        {
            padding-top: var(--size-padding-#{$sizeName});
            padding-bottom: var(--size-padding-#{$sizeName});

            &-fixed
            {
                padding-top: var(--size-padding-fixed-#{$sizeName});
                padding-bottom: var(--size-padding-fixed-#{$sizeName});
            }
        }
    }
}

@mixin buildBorderRadiusCss($type, $sizes)
{
    @each $sizeName, $size in $sizes
    {
        --size-borderRadius-#{$sizeName}: #{getSize($fontSize, $size)};
        --size-borderRadius-fixed-#{$sizeName}: #{getSize($fontSize, $size, true)};
    }

    @each $sizeName, $size in $sizes
    {
        .border-round-#{$sizeName}
        {
            border-radius: var(--size-borderRadius-#{$sizeName});

            &-fixed
            {
                border-radius: var(--size-borderRadius-fixed-#{$sizeName});
            }
        }

        .top-border-round
        {
            border-top-left-radius: var(--size-borderRadius-#{$sizeName});
            border-top-right-radius: var(--size-borderRadius-#{$sizeName});

            &-fixed
            {
                border-top-right-radius: var(--size-borderRadius-fixed-#{$sizeName});
                border-bottom-right-radius: var(--size-borderRadius-fixed-#{$sizeName});
            }
        }

        .bottom-border-round
        {
            border-bottom-left-radius: var(--size-borderRadius-#{$sizeName});
            border-bottom-right-radius: var(--size-borderRadius-#{$sizeName});

            &-fixed
            {
                border-top-right-radius: var(--size-borderRadius-fixed-#{$sizeName});
                border-bottom-right-radius: var(--size-borderRadius-fixed-#{$sizeName});
            }
        }

        .left-border-round
        {
            border-top-left-radius: var(--size-borderRadius-#{$sizeName});
            border-bottom-left-radius: var(--size-borderRadius-#{$sizeName});

            &-fixed
            {
                border-top-right-radius: var(--size-borderRadius-fixed-#{$sizeName});
                border-bottom-right-radius: var(--size-borderRadius-fixed-#{$sizeName});
            }
        }

        .right-border-round
        {
            border-top-right-radius: var(--size-borderRadius-#{$sizeName});
            border-bottom-right-radius: var(--size-borderRadius-#{$sizeName});

            &-fixed
            {
                border-top-right-radius: var(--size-borderRadius-fixed-#{$sizeName});
                border-bottom-right-radius: var(--size-borderRadius-fixed-#{$sizeName});
            }
        }

        .top-left-border-round
        {
            border-top-left-radius: var(--size-borderRadius-#{$sizeName});
            
            &-fixed
            {
                border-top-left-radius: var(--size-borderRadius-fixed-#{$sizeName});
            }
        }

        .bottom-left-border-round
        {
            border-bottom-left-radius: var(--size-borderRadius-#{$sizeName});

            &-fixed
            {
                border-bottom-left-radius: var(--size-borderRadius-fixed-#{$sizeName});
            }
        }

        .top-right-border-round
        {
            border-top-right-radius: var(--size-borderRadius-#{$sizeName});

            &-fixed
            {
                border-top-right-radius: var(--size-borderRadius-fixed-#{$sizeName});
            }
        }

        .bottom-right-border-round
        {
            border-bottom-right-radius: var(--size-borderRadius-#{$sizeName});

            &-fixed
            {
                border-bottom-right-radius: var(--size-borderRadius-fixed-#{$sizeName});
            }
        }
    }
}

@mixin buildGapsCss($fontSize, $sizes)
{
    @each $sizeName, $size in $sizes
    {
        --size-gap-#{$sizeName}: #{getSize($fontSize, $size)};
        --size-gap-fixed-#{$sizeName}: #{getSize($fontSize, $size, true)};
    }

    @each $sizeName, $size in $sizes
    {
        .column-gap-#{$sizeName}
        {
            column-gap: var(--size-gap-#{$sizeName});

            &-fixed
            {
                column-gap: var(--size-gap-fixed-#{$sizeName});
            }
        }

        .row-gap-#{$sizeName}
        {
            row-gap: var(--size-gap-#{$sizeName});

            &-fixed
            {
                row-gap: var(--size-gap-fixed-#{$sizeName});
            }
        }

        .gap-#{$sizeName}
        {
            gap: var(--size-gap-#{$sizeName});

            &-fixed
            {
                gap: var(--size-gap-fixed-#{$sizeName});
            }
        }
    }
}

@mixin buildFontSizeCss($fontSize, $sizes)
{
    @each $sizeName, $size in $sizes
    {
        --size-font-#{$sizeName}: #{getSize($fontSize, $size)};
        --size-font-fixed-#{$sizeName}: #{getSize($fontSize, $size, true)};
    }

    @each $sizeName, $size in $sizes
    {
        .#{$sizeName}-text
        {
            font-size: var(--size-padding-#{$sizeName});

            &-fixed
            {
                font-size: var(--size-padding-fixed-#{$sizeName});
            }
        }
    }
}

@mixin buildFixedSizes($fontSize)
{
    --size-1px: #{getSize($fontSize, 1, true)};
    --size-2px: #{getSize($fontSize, 2, true)};
    --size-3px: #{getSize($fontSize, 3, true)};
    --size-4px: #{getSize($fontSize, 4, true)};
    --size-5px: #{getSize($fontSize, 5, true)};
    --size-6px: #{getSize($fontSize, 6, true)};
    --size-7px: #{getSize($fontSize, 7, true)};
    --size-8px: #{getSize($fontSize, 8, true)};
    --size-9px: #{getSize($fontSize, 9, true)};
    --size-10px: #{getSize($fontSize, 10, true)};
    --size-11px: #{getSize($fontSize, 11, true)};
    --size-12px: #{getSize($fontSize, 12, true)};
    --size-13px: #{getSize($fontSize, 13, true)};
    --size-14px: #{getSize($fontSize, 14, true)};
    --size-15px: #{getSize($fontSize, 15, true)};
    --size-16px: #{getSize($fontSize, 16, true)};
    --size-17px: #{getSize($fontSize, 17, true)};
    --size-18px: #{getSize($fontSize, 18, true)};
    --size-19px: #{getSize($fontSize, 19, true)};
    --size-20px: #{getSize($fontSize, 20, true)};
    --size-21px: #{getSize($fontSize, 21, true)};
    --size-22px: #{getSize($fontSize, 22, true)};
    --size-23px: #{getSize($fontSize, 23, true)};
    --size-24px: #{getSize($fontSize, 24, true)};
}

@mixin buildSizes($fontSize, $sizes)
{
    @each $sizeName, $size in $sizes
    {
        --size-#{$sizeName}: #{getSize($fontSize, $size)};
        --size-fixed-#{$sizeName}: #{getSize($fontSize, $size, true)};
    }
}

@mixin css-reset
{
    *,
    *::before,
    *::after
    {
        box-sizing: border-box;
    }

    *
    {
        margin: 0;
        padding: 0;
        font: inherit;
    }
}